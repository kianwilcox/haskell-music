%-*- mode: Latex; abbrev-mode: true; auto-fill-function: do-auto-fill -*-

%include lhs2TeX.fmt
%include myFormat.fmt

\out{
\begin{code}
-- This code was automatically generated by lhs2tex --code, from the file 
-- HSoM/Interlude.lhs.  (See HSoM/MakeCode.bat.)

\end{code}
}

\chapter{A Musical Interlude}
\label{ch:interlude}

At this point enough detail about Haskell and Euterpea has been
covered that it is worth developing a small but full application or
two.  In this chapter an existing composition will be transcribed into
Euterpea, thus exemplifying how to express conventional musical ideas
in Euterpea.  Then a simple form of algorithmic composition will be
presented, where it will become apparent that more exotic things can
easily be expressed as well.

But before tackling either of these, Haskell's \emph{modules} will be
described in more detail.

\section{Modules}
\label{sec:modules}

Haskell programs are partitioned into \emph{modules} that capture
common types, functions, etc.\ that naturally comprise an application.
The first part of a module is called the module \emph{header}, and in
it one declares what the name of the module is, and what other modules
it might import.  For this chapter the module's name is |Interlude|,
into which the module |Euterpea| is imported:

\indexkw{module}
\begin{code}
module Euterpea.Examples.Interlude where
import Euterpea
\end{code} 

\syn{Module names must always be capitalized (just like type names).}

If one wishes to use this module in another module |M|, it may be
imported into |M|, just as was done above in importing |Euterpea| into
|Interlude|:
\begin{spec}
module M where
import Interlude
\end{spec}
This will make available in |M| all of the names of functions, types,
and so on that were defined at the top-level of |Interlude|.

\index{module!interface}
\index{module!\hkw{import}} \indexkw{import}

But this isn't always what the programmer would like.  Another purpose
of a module is to manage the overall \emph{name space} of an
application.  Modules allow one to structure an application in such a
way that only the functionality intended for the end user is
visible---everything else needed to implement the system is
effectively hidden.  In the case of |Interlude|, there are only a few
names whose visibillity is desirable: |childSong6|, ..., and ....
This can be achieved by writing the module header as follows:

\begin{spec}
module Interlude(childSong6, ...) where
import Euterpea
\end{spec} 
\out{
module Interlude(childSong6) where
import Euterpea
}
This set of visible names is sometimes called the \emph{export list}
of the module.  And if type signatures are included, as in:
\begin{spec}
module Interlude(childSong6 :: Music Pitch) where
import Euterpea
\end{spec} 
the list of names is sometimes called the {\em interface} to the
module.  If the list is omitted, as was done initially, then
\emph{all} names defined at the top-level of the module are exported.

There are many other rules concerning the import and export of names
to and from modules.  Rather than introduce them all at once, they
will be introduced as needed in future chapter.

\begin{figure*}
\centerline{
\epsfysize=7in 
\epsfbox{pics/ChildSong6.eps}
}
\caption{Excerpt from Chick Corea's \emph{Child Song No.\ 6}}
\label{fig:childsong6}
\end{figure*}

\section{Transcribing an Existing Score}

Figure \ref{fig:childsong6} shows the first 28 bars of Chick Corea's
\emph{Child Song No.\ 6}, written for electric piano.  Analyzing this
tune explores several basic issues that arise in the transcription of
an existing score into Euterpea, including repeating phrases, grace
notes, triplets, tempo, and specifying an instrument.  To begin,
however, a couple of auxiliary functions are defined to make the job
easier.

\subsection{Auxiliary Functions}

For starters, note that there are several repeating patterns of notes
in this composition, each enclosed in a rectangle in Figure
\ref{fig:childsong6}.  In fact, the bass line consists \emph{entirely}
of three repeating phrases.  In anticipation of this, a function can
be defined that repeats a phrase a particular number of times:
\begin{spec}

timesM      :: Int -> Music a -> Music a
timesM 0 m  = rest 0
timesM n m  = m :+: timesM (n-1) m
\end{spec}

\syn{Note that pattern-matching can be used on numbers.  As mentioned
  earlier, when there is more than one equation that defines a
  function, the first equation is tried first.  If it fails, the
  second equation is tried, and so on.  In the case above, if the
  first argument to |timesM| is not 0, the first equation will fail.
  The second equation is then tried, which always succeeds.
}

%% An expression \hs{if pred then cons else alt} is called a {\em
%%     conditional expression}.  If \hs{pred} (called the {\em
%%     predicate}) evaluates to |True|, then \hs{cons} (called the {\em
%%     consequence}) is the result; if \hs{pred} evaluates to |False|,
%%   then \hs{alt} (called the {\em alternative}) is the result.

So, for example, |timesM 3 b1| will repeat the baseline |b1| (to be
defined shortly) three times.

To motivate the second auxiliary function, note in Figure
\ref{fig:childsong6} that there are many melodic lines that consist of
a sequence of consecutive notes having the same duration (for example
eighth notes in the melody, and dotted quarter notes in the bass).  To
avoid having to write each of these durations explicitly, a function
that specifies them just once is defined.  To do this, recall that |a
4 qn| is a concert A quarter note.  Then note that, because of
currying, |a 4| is a function that can be applied to any
duration---i.e.\ its type is |Dur -> Music a|.  In other words, it's a
note whose duration hasn't been specified yet.

With this thought in mind, one can return to the original problem and
define a function that takes a duration and a \emph{list} of notes with
the aforementioned type, returning a |Music| value with the duration
attached to each note appropriately.  In Haskell:

\begin{code}

addDur       :: Dur -> [Dur -> Music a] -> Music a
addDur d ns  =  let f n = n d
                in line (map f ns)
\end{code}

%% -- lmap d xs = line [ x d || x <- xs ]

%% The reader should work with this example a bit to be sure that she
%% understands it well.

Finally, a function to add a grace note to a note is defined.  Grace
notes can approach the principal note from above or below; sometimes
starting a half-step away, and sometimes a whole step; and having a
rhythmic interpretation that is to a large extent up to the performer.
In the case of the six uses of grace notes in \emph{Child Song
  No.\ 6}, the assumption will be that the grace note begins on the
downbeat of the principal note, and thus its duration will subtract
from that of the principal note.  It will also be assumed that the
grace note duration is 1/8 of that of the principal note.  Thus the
goal is to define a function:
\begin{code}
graceNote :: Int -> Music Pitch -> Music Pitch
\end{code}
such that |graceNote n (note d p)| is a |Music| value consisting of two
notes, the first being the grace note whose duration is |d/8| and
whose pitch is |n| semitones higher (or lower if |n| is negative) than
|p|, and the second being the principal note at pitch |p| but now with
duration |7d/8|.  In Haskell:
\begin{code}
graceNote n  (Prim (Note d p))  =
          note (d/8) (trans n p) :+: note (7*d/8) p
graceNote n  _                  = 
          error "Can only add a grace note to a note."
\end{code}  
Note that pattern-matching is performed against the nested
constructors of |Prim| and |Note|---one cannot match against the
application of a function such as |note|.  Also note the error
message---programs are not expected to ever apply |graceNote| to
something other than a single note.

(In Chapter~\ref{ch:more-music} a slightly more general form of
|graceNote| will be defined.)

The only special cases that will not be handled using auxiliary
functions are the single staccato on note four of bar fifteen, and the
single portamento on note three of bar sixteen.  These situations will
be addressed differently in a later chapter.

\subsection{Bass Line}

With these auxilary functions now defined, the base line in
Figure~\ref{fig:childsong6} can be defined by first noting the three
repeating phrases (enclosed in rectangular boxes), which can be
captured as follows:
\begin{code}

b1  = addDur dqn [b 3,   fs 4,  g 4,   fs 4]
b2  = addDur dqn [b 3,   es 4,  fs 4,  es 4]
b3  = addDur dqn [as 3,  fs 4,  g 4,   fs 4]
\end{code}

Using |timesM| it is then easy to define the entire 28 bars of the
base line:
\begin{code}
bassLine =  timesM 3 b1 :+: timesM 2 b2 :+: 
            timesM 4 b3 :+: timesM 5 b1
\end{code}

\subsection{Main Voice}

The upper voice of this composition is a bit more tedious to define,
but is still straightforward.  At the highest level, it consists of
the phrase |v1| in the first two bars (in the rectangular box)
repeated three times, followed by the remaining melody, which will be
named |v2|:
\begin{code}
mainVoice = timesM 3 v1 :+: v2
\end{code}

The repeating phrase |v1| is defined by:
\begin{code}
v1   = v1a :+: graceNote (-1) (d 5 qn) :+: v1b                 -- bars 1-2
v1a  = addDur en [a 5, e 5, d 5, fs 5, cs 5, b 4, e 5, b 4]
v1b  = addDur en [cs 5, b 4]
\end{code}
Note the treatment of the grace note.

The remainder of the main voice, |v2|, is defined in seven pieces:
\begin{code}
v2 = v2a :+: v2b :+: v2c :+: v2d :+: v2e :+: v2f :+: v2g
\end{code}
with each of the pieces defined in Figure \ref{fig:bars7-28}.  Note that:
\begin{itemize}
\item The phrases are divided so as to (for the most part) line up
  with bar lines, for convenience.  But it may be that this is not the
  best way to organize the music---for example, one could argue that
  the last two notes in bar 20 form a pick-up to the phrase that
  follows, and thus more logically fall with that following phrase.
  The organization of the Euterpea code in this way is at the
  discretion of the composer.

\item The stacatto is treated by playing the qurater note as an eighth
  note; the portamento is ignored.  As mentioned earlier, these
  ornamentations will be addressed differently in a later chapter.

\item The triplet of eighth notes in bar 25 is addressed by scaling the
  tempo by a factor of |3/2|.
\end{itemize}

\begin{figure}
\begin{code}
v2a  =  line [  cs 5 (dhn+dhn), d 5 dhn, 
                f 5 hn, gs 5 qn, fs 5 (hn+en), g 5 en]     -- bars 7-11
v2b  =  addDur en [  fs 5, e 5, cs 5, as 4] :+: a 4 dqn :+:
        addDur en [  as 4, cs 5, fs 5, e 5, fs 5]          -- bars 12-13
v2c  =  line [  g 5 en, as 5 en, cs 6 (hn+en), d 6 en, cs 6 en] :+:
        e 5 en :+: enr :+: 
        line [  as 5 en, a 5 en, g 5 en, d 5 qn, c 5 en, cs 5 en] 
                                                           -- bars 14-16
v2d  =  addDur en [  fs 5, cs 5, e 5, cs 5, 
                     a 4, as 4, d 5, e 5, fs 5]            -- bars 17-18.5
v2e  =  line [  graceNote 2 (e 5 qn), d 5 en, graceNote 2 (d 5 qn), cs 5 en,
                graceNote 1 (cs 5 qn), b 4 (en+hn), cs 5 en, b 4 en ]  
                                                           -- bars 18.5-20
v2f  =  line [  fs 5 en, a 5 en, b 5 (hn+qn), a 5 en, fs 5 en, e 5 qn,
                d 5 en, fs 5 en, e 5 hn, d 5 hn, fs 5 qn]  -- bars 21-23
v2g  =  tempo (3/2) (line [cs 5 en, d 5 en, cs 5 en]) :+: 
        b 4 (3*dhn+hn)                                     -- bars 24-28
\end{code}
\caption{Bars 7-28}
\label{fig:bars7-28}
\end{figure}

\subsection{Putting It All Together}

In the Preface to \emph{Children's Songs -- 20 Pieces for Keyboard}
\cite{Corea94}, Chick Corea notes that, ``Songs 1 through 15 were
composed for the Fender Rhodes.''  Therefore the MIDI instrument
|RhodesPiano| is a logical choice for the transcription of his
composition.  Furthermore, note that a dotted half-note is specified
to have a metronome value of 69.  By default, the |play| function in
Euterpea uses a tempo equivalent to a quarter note having a metronome
value of 120.  Therefore the tempo should be scaled by a factor of
|(dhn/qn)*(69/120)|.

These two observations lead to the final definition of the
transcription of \emph{Children's Song No.\ 6} into Euterpea:
\begin{code}
childSong6 :: Music Pitch
childSong6 =  let t = (dhn/qn)*(69/120)
              in instrument  RhodesPiano 
                             (tempo t (bassLine :=: mainVoice))
\end{code}
The intent is that this is the only value that will be of interest to
users of this module, and thus |childSong6| is the only name exported
from this section of the module, as discussed in Section
\ref{sec:modules}.

This example can be played through the command |play childSong6|.

\vspace{.1in}\hrule

\begin{exercise}{\em
Find a simple piece of music written by your favorite composer, and
transcribe it into Euterpea.  In doing so, look for repeating patterns,
transposed phrases, etc.\ and reflect this in your code, thus revealing
deeper structural aspects of the music than that found in common
practice notation.}
\end{exercise}

\vspace{.1in}\hrule

\section{Simple Algorithmic Composition}

TBD

